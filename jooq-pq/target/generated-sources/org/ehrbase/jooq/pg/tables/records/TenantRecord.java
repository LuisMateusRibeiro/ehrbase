/*
 * This file is generated by jOOQ.
 */
package org.ehrbase.jooq.pg.tables.records;


import org.ehrbase.jooq.pg.tables.Tenant;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TenantRecord extends UpdatableRecordImpl<TenantRecord> implements Record4<String, String, JSON, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ehr.tenant.tenant_id</code>.
     */
    public void setTenantId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>ehr.tenant.tenant_id</code>.
     */
    public String getTenantId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ehr.tenant.tenant_name</code>.
     */
    public void setTenantName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>ehr.tenant.tenant_name</code>.
     */
    public String getTenantName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ehr.tenant.tenant_properties</code>.
     */
    public void setTenantProperties(JSON value) {
        set(2, value);
    }

    /**
     * Getter for <code>ehr.tenant.tenant_properties</code>.
     */
    public JSON getTenantProperties() {
        return (JSON) get(2);
    }

    /**
     * Setter for <code>ehr.tenant.id</code>.
     */
    public void setId(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>ehr.tenant.id</code>.
     */
    public Short getId() {
        return (Short) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, JSON, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, JSON, Short> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Tenant.TENANT.TENANT_ID;
    }

    @Override
    public Field<String> field2() {
        return Tenant.TENANT.TENANT_NAME;
    }

    @Override
    public Field<JSON> field3() {
        return Tenant.TENANT.TENANT_PROPERTIES;
    }

    @Override
    public Field<Short> field4() {
        return Tenant.TENANT.ID;
    }

    @Override
    public String component1() {
        return getTenantId();
    }

    @Override
    public String component2() {
        return getTenantName();
    }

    @Override
    public JSON component3() {
        return getTenantProperties();
    }

    @Override
    public Short component4() {
        return getId();
    }

    @Override
    public String value1() {
        return getTenantId();
    }

    @Override
    public String value2() {
        return getTenantName();
    }

    @Override
    public JSON value3() {
        return getTenantProperties();
    }

    @Override
    public Short value4() {
        return getId();
    }

    @Override
    public TenantRecord value1(String value) {
        setTenantId(value);
        return this;
    }

    @Override
    public TenantRecord value2(String value) {
        setTenantName(value);
        return this;
    }

    @Override
    public TenantRecord value3(JSON value) {
        setTenantProperties(value);
        return this;
    }

    @Override
    public TenantRecord value4(Short value) {
        setId(value);
        return this;
    }

    @Override
    public TenantRecord values(String value1, String value2, JSON value3, Short value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TenantRecord
     */
    public TenantRecord() {
        super(Tenant.TENANT);
    }

    /**
     * Create a detached, initialised TenantRecord
     */
    public TenantRecord(String tenantId, String tenantName, JSON tenantProperties, Short id) {
        super(Tenant.TENANT);

        setTenantId(tenantId);
        setTenantName(tenantName);
        setTenantProperties(tenantProperties);
        setId(id);
        resetChangedOnNotNull();
    }
}
